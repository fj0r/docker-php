FROM debian:10-slim

ARG s6url=https://github.com/just-containers/s6-overlay/releases/download/v1.22.1.0/s6-overlay-amd64.tar.gz
ARG php_url=https://www.php.net/get/php-7.2.24.tar.xz/from/this/mirror

# prevent Debian's PHP packages from being installed
# https://github.com/docker-library/php/pull/542
RUN set -eux; \
    { \
        echo 'Package: php*'; \
        echo 'Pin: release *'; \
        echo 'Pin-Priority: -1'; \
    } > /etc/apt/preferences.d/no-debian-php

ENV PHPIZE_DEPS \
        autoconf \
        dpkg-dev \
        file \
        g++ \
        gcc \
        libc-dev \
        make \
        pkg-config \
        re2c \
        openssh-server \
        wget \
        nginx \
        vim

RUN set -eux \
  ;sed -i 's/\(.*\)\(security\|deb\).debian.org\(.*\)main/\1ftp2.cn.debian.org\3main contrib non-free/g' /etc/apt/sources.list \
  ; apt-get update \
  ; apt-get install -y --no-install-recommends \
        apt-transport-https \
        ca-certificates \
        curl \
        libedit2 \
        libsqlite3-0 \
        libxml2 \
        xz-utils\
        $PHPIZE_DEPS \
  ; apt-get autoremove -y && apt-get clean -y && rm -rf /var/lib/apt/lists/* \
  ; curl --fail --silent -L ${s6url} | \
    tar xzvf - -C / \
  ; mkdir -p /var/run/sshd

ENV LANG=C.UTF-8 LC_ALL=C.UTF-8 TIMEZONE=Asia/Shanghai
RUN set -eux \
  ; ln -sf /usr/share/zoneinfo/$TIMEZONE /etc/localtime \
  ; echo "$TIMEZONE" > /etc/timezone

ENV PHP_INI_DIR=/usr/local/etc/php
RUN set -eux; \
	mkdir -p "$PHP_INI_DIR/conf.d"; \
# allow running as an arbitrary user (https://github.com/docker-library/php/issues/743)
	chown www-data:www-data /srv; \
	chmod 777 /srv

ENV PHP_EXTRA_CONFIGURE_ARGS \
        --enable-fpm \
        --with-fpm-user=www-data \
        --with-fpm-group=www-data \
        --disable-cgi

ENV PHP_CFLAGS \
        -fstack-protector-strong \
        -fpic \
        -fpie \
        -O2

ENV PHP_CPPFLAGS \
        -fstack-protector-strong \
        -fpic \
        -fpie \
        -O2

ENV PHP_LDFLAGS \
        -Wl,-O1 \
        -Wl,--hash-style=both \
        -pie

ENV GPG_KEYS 0BD78B5F97500D450838F95DFE857D9A90D90EC1 6E4F6AB321FDC07F2C332E3AC2BF0BC433CFC8B3
ENV PHP_VERSION=5.6.40
ENV PHP_URL=https://secure.php.net/get/php-5.6.40.tar.xz/from/this/mirror
ENV PHP_ASC_URL=https://secure.php.net/get/php-5.6.40.tar.xz.asc/from/this/mirror
ENV PHP_SHA256=1369a51eee3995d7fbd1c5342e5cc917760e276d561595b6052b21ace2656d1c PHP_MD5=

RUN set -xe \
  ; fetchDeps='\
        wget ' \
  ; if ! command -v gpg > /dev/null; then \
        fetchDeps="$fetchDeps \
            dirmngr \
            gnupg \
            "; \
    fi \
  ; apt-get update \
  ; apt-get install -y --no-install-recommends \
        $fetchDeps \
  ; rm -rf /var/lib/apt/lists/* \
  ; mkdir -p /usr/src \
  ; cd /usr/src \
  ; wget -O php.tar.xz "$PHP_URL" \
  ; if [ -n "$PHP_SHA256" ]; then \
        echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -; \
    fi \
  ; if [ -n "$PHP_MD5" ]; then \
        echo "$PHP_MD5 *php.tar.xz" | md5sum -c -; \
    fi \
  ; if [ -n "$PHP_ASC_URL" ]; then \
        wget -O php.tar.xz.asc "$PHP_ASC_URL"; \
        export GNUPGHOME="$(mktemp -d)"; \
        for key in $GPG_KEYS; do \
                gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key"; \
        done; \
        gpg --batch --verify php.tar.xz.asc php.tar.xz; \
        command -v gpgconf > /dev/null && gpgconf --kill all; \
        rm -rf "$GNUPGHOME"; \
    fi \
  ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps

COPY docker-php-source /usr/local/bin/

RUN set -eux \
  ; savedAptMark="$(apt-mark showmanual)" \
  ; apt-get update \
  ; apt-get install -y --no-install-recommends \
        libcurl4-openssl-dev \
        libedit-dev \
        libsqlite3-dev \
        libssl1.0-dev \
        libxml2-dev \
        zlib1g-dev \
        ${PHP_EXTRA_BUILD_DEPS:-} \
  ; rm -rf /var/lib/apt/lists/* \
  ; export \
        CFLAGS="$PHP_CFLAGS" \
        CPPFLAGS="$PHP_CPPFLAGS" \
        LDFLAGS="$PHP_LDFLAGS" \
  ; docker-php-source extract \
  ; cd /usr/src/php \
  ; gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
  ; debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)" \
  ; if [ ! -d /usr/include/curl ]; then \
        ln -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl; \
    fi \
  ; ./configure \
        --build="$gnuArch" \
        --with-config-file-path="$PHP_INI_DIR" \
        --with-config-file-scan-dir="$PHP_INI_DIR/conf.d" \
        --enable-option-checking=fatal \
        --with-mhash \
        --enable-ftp \
        --enable-mbstring \
        --enable-mysqlnd \
        --with-curl \
        --with-libedit \
        --with-openssl \
        --with-zlib \
        $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit') \
        --with-libdir="lib/$debMultiarch" \
        ${PHP_EXTRA_CONFIGURE_ARGS:-} \
  ; make -j "$(nproc)" \
  ; make install \
  ; find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true \
  ; make clean \
  ; cp -v php.ini-* "$PHP_INI_DIR/" \
  ; cd / \
  ; docker-php-source delete \
  ; apt-mark auto '.*' > /dev/null \
  ; [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark \
  ; find /usr/local -type f -executable -exec ldd '{}' ';'  \
        | awk '/=>/ { print $(NF-1) }' \
        | sort -u  \
        | xargs -r dpkg-query --search  \
        | cut -d: -f1  \
        | sort -u  \
        | xargs -r apt-mark manual  \
  ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \
  ; php --version \
  ; pecl update-channels \
  ; rm -rf /tmp/pear ~/.pearrc

COPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/

RUN { echo '#!/bin/sh'; echo 'exec pkg-config "$@" freetype2'; } > /usr/local/bin/freetype-config \
 && chmod +x /usr/local/bin/freetype-config

RUN apt-get update && apt-get install -y \
        libfreetype6-dev \
        libjpeg62-turbo-dev \
        libpng-dev \
    && docker-php-ext-install -j$(nproc) iconv \
    && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \
    && docker-php-ext-install -j$(nproc) gd \
    && rm -rf /var/lib/apt/lists/*

RUN pecl install redis-4.0.1 \
    && pecl install xdebug-2.6.0 \
    && docker-php-ext-enable redis xdebug

RUN set -eux \
  #; ls /usr/local/lib/php/extensions/no-debug-non-zts-20170718 \
  ; docker-php-ext-install mysqli && docker-php-ext-enable mysqli \
  ; docker-php-ext-install mysql && docker-php-ext-enable mysql \
  ; docker-php-ext-install pdo && docker-php-ext-enable pdo \
  ; docker-php-ext-install pdo_mysql && docker-php-ext-enable pdo_mysql \
  #; docker-php-ext-install curl && docker-php-ext-enable curl \
  #; docker-php-ext-install bz2 && docker-php-ext-enable bz2 \
  ; docker-php-ext-install mbstring && docker-php-ext-enable mbstring

RUN set -eux \
  ; docker-php-ext-install bcmath && docker-php-ext-enable bcmath \
  ; docker-php-ext-install zip && docker-php-ext-enable zip

COPY docker-nginx-default /etc/nginx/conf.d/default.conf
RUN set -eux \
  ; rm -rf /etc/nginx/sites-available/* \
  ; rm -rf /etc/nginx/sites-enabled/* \
  ; sed -i '1i\daemon off;' /etc/nginx/nginx.conf \
  ; cd /usr/local/etc \
  ; if [ -d php-fpm.d ]; then \
        # for some reason, upstream's php-fpm.conf.default has "include=NONE/etc/php-fpm.d/*.conf"
        sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \
        cp php-fpm.d/www.conf.default php-fpm.d/www.conf; \
        sed -i 's!^;\(listen\.owner.*\)!\1!g' php-fpm.d/www.conf; \
        sed -i 's!^;\(listen\.group.*\)!\1!g' php-fpm.d/www.conf; \
        sed -i 's!^;\(listen\.mode.*\)!\1!g' php-fpm.d/www.conf; \
    else \
        # PHP 5.x doesn't use "include=" by default, so we'll create our own simple config that mimics PHP 7+ for consistency
        mkdir php-fpm.d; \
        cp php-fpm.conf.default php-fpm.d/www.conf; \
        { \
        	echo '[global]'; \
        	echo 'include=etc/php-fpm.d/*.conf'; \
        } | tee php-fpm.conf; \
    fi \
  ; { \
        echo '[global]'; \
        echo 'error_log = /proc/self/fd/2'; \
        echo; \
        echo '[www]'; \
        echo '; if we send this to /proc/self/fd/1, it never appears'; \
        echo 'access.log = /proc/self/fd/2'; \
        echo; \
        echo 'clear_env = no'; \
        echo; \
        echo '; Ensure worker stdout and stderr are sent to the main error log.'; \
        echo 'catch_workers_output = yes'; \
    } | tee php-fpm.d/docker.conf \
  ; { \
        echo '[global]'; \
        echo 'daemonize = no'; \
        echo; \
        echo '[www]'; \
        echo 'listen = /var/run/php-fpm.sock'; \
    } | tee php-fpm.d/zz-docker.conf \
  ; mv "$PHP_INI_DIR/php.ini-production" "$PHP_INI_DIR/php.ini" \
  ; sed -i 's!^.*\(date.timezone =\).*$!\1 Asia/Shanghai!' "$PHP_INI_DIR/php.ini" \
  ; { \
        echo 'xdebug.remote_log="/tmp/xdebug.log"' ; \
        echo 'xdebug.remote_enable=on' ; \
        echo 'xdebug.remote_autostart=on' ; \
        echo 'xdebug.remote_port=9001' ; \
        echo 'xdebug.idekey=XDEBUG_ECLIPSE' ; \
    } >> $PHP_INI_DIR/conf.d/docker-php-ext-xdebug.ini

#ENTRYPOINT ["docker-php-entrypoint"]
##<autogenerated>##

ENV wstunnel_version=2.0
ARG wstunnel_url=https://github.com/erebe/wstunnel/releases/download/${wstunnel_version}/wstunnel_linux_x64
RUN wget -q -O /usr/local/bin/wstunnel ${wstunnel_url} \
    ; chmod a+x /usr/local/bin/wstunnel
COPY services.d /etc/services.d
WORKDIR /srv

VOLUME [ "/srv", "/root/.vscode-server" ]
EXPOSE 80

ENTRYPOINT [ "/init" ]